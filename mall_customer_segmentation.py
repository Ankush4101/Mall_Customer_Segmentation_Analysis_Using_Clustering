# -*- coding: utf-8 -*-
"""Mall_Customer_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjh8ZHk77aEfdV4rKkkEQ3pEHP_nttK9
"""

#mount the drive
from google.colab import drive
drive.mount('/content/drive')

#importing libraries

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt
import sqlite3

#Loading and Exploring Data

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/Mall Customer Segmentation Analysis/Mall_Customers.csv')

# Display the first few rows
print(df.head())

#Data Preprocessing

# Check for missing values
print(df.isnull().sum())

# Drop irrelevant columns
df = df.drop(['CustomerID'], axis=1)

# Quick summary of the data
print(df.describe())

# Visualizing data distribution for Annual Income and Spending Score
plt.scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'])
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Income vs Spending Score')
plt.show()

"""**K-Means Clustering**"""

# perform clustering to segment customers into groups.

# We are using 'Annual Income' and 'Spending Score' for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Using the Elbow method to determine the optimal number of clusters (K)
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

# Plot the Elbow curve
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Based on the Elbow curve, let's choose K=5
kmeans = KMeans(n_clusters=5)
df['Cluster'] = kmeans.fit_predict(X)

# Display the resulting clusters
print(df.head())

import sqlite3

# Create a SQLite database
conn = sqlite3.connect('customer_segmentation_.db')
cursor = conn.cursor()

# Drop the table if it exists
cursor.execute('DROP TABLE IF EXISTS customer_segment')

# Create a table in the database
cursor.execute('''
CREATE TABLE IF NOT EXISTS customer_segment (
    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT, -- Set CustomerID to autoincrement
    Gender TEXT,
    Age INTEGER,
    AnnualIncome INTEGER,
    SpendingScore INTEGER,
    Cluster INTEGER
)
''')

# Insert data into the table
for index, row in df.iterrows():
    cursor.execute('''
    INSERT INTO customer_segment (Gender, Age, AnnualIncome, SpendingScore, Cluster)
    VALUES (?, ?, ?, ?, ?)
    ''', (row['Gender'], row['Age'], row['Annual Income (k$)'], row['Spending Score (1-100)'], row['Cluster']))

# Commit the changes and close the connection
conn.commit()
# conn.close()

# Querying the SQL Database


# Query the database to get the number of customers in each cluster
cursor.execute('SELECT Cluster, COUNT(*) FROM customer_segment GROUP BY Cluster')
clusters = cursor.fetchall()

for cluster in clusters:
    print(f"Cluster {cluster[0]}: {cluster[1]} customers")

# Example of querying a specific cluster
cursor.execute('SELECT * FROM customer_segment WHERE Cluster = 2')
customers_in_cluster_2 = cursor.fetchall()
for customer in customers_in_cluster_2:
    print(customer)

conn.close()

"""**1. Visualizing Clusters in 2D (Income vs. Spending Score)**


As Annual Income and Spending Score as the features for clustering, we can plot these two features and color-code the points based on their assigned cluster.
"""

# Create a scatter plot of clusters
plt.figure(figsize=(10, 6))
plt.scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'], c=df['Cluster'], cmap='viridis', s=100, alpha=0.6)

# Adding centroids to the plot
centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c='red', label='Centroids', marker='X')

plt.title('Customer Segments (Income vs Spending Score)')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.grid(True)
plt.show()

"""**Visualizing the Distribution of Customers by Age, Income, and Spending Score**

**Histogram of Annual Income Distribution by Cluster**
"""

# Plot histogram of Annual Income distribution across clusters
plt.figure(figsize=(10, 6))
for i in range(5):  # Assuming K=5 clusters
    plt.hist(df[df['Cluster'] == i]['Annual Income (k$)'], bins=10, alpha=0.5, label=f'Cluster {i}')

plt.title('Distribution of Annual Income by Cluster')
plt.xlabel('Annual Income (k$)')
plt.ylabel('No. of People')
plt.legend()
plt.show()

"""**Histogram of Spending Score Distribution by Cluster**"""

# Plot histogram of Spending Score distribution across clusters
plt.figure(figsize=(10, 6))
for i in range(5):
    plt.hist(df[df['Cluster'] == i]['Spending Score (1-100)'], bins=10, alpha=0.5, label=f'Cluster {i}')

plt.title('Distribution of Spending Score by Cluster')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('No. of People')
plt.legend()
plt.show()

"""**Box Plot of Age Distribution by Cluster**"""

# Boxplot to visualize the age distribution by cluster
plt.figure(figsize=(10, 6))
df.boxplot(column='Age', by='Cluster', grid=False, showfliers=False)
plt.title('Age Distribution by Cluster')
plt.suptitle('')  # Suppress the automatic title
plt.xlabel('Cluster')
plt.ylabel('Age')
plt.show()

"""**Comparisions Among the Clusters**"""

# We'll use only 'Annual Income (k$)' and 'Spending Score (1-100)' for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]


# Fit the model and predict the clusters
df['Cluster'] = kmeans.fit_predict(X)

# Get the centroids (cluster centers)
centroids = kmeans.cluster_centers_

# Convert centroids into a DataFrame for easy comparison
centroids_df = pd.DataFrame(centroids, columns=['Annual Income (k$)', 'Spending Score (1-100)'])
centroids_df['Cluster'] = centroids_df.index
centroids_df = centroids_df.set_index('Cluster')

# Display the centroids DataFrame (Cluster Comparison Table)
print(centroids_df)

"""bar chart to visualize the average Annual Income and Spending Score for each cluster"""

import matplotlib.pyplot as plt

# Plot the centroids of each cluster for Annual Income and Spending Score
centroids_df.plot(kind='bar', figsize=(10, 6))

plt.title('Comparison of Cluster Centroids')
plt.xlabel('Cluster')
plt.ylabel('Value')
plt.xticks(rotation=0)
plt.legend(["Annual Income (k$)", "Spending Score (1-100)"], loc='upper right')
plt.grid(True)
plt.show()

"""**CONCLUSION**

After Analysis We can say that:

**Cluster 0** : **Low-Income, Low-Spending Customers**


**Cluster 1**  **Middle-Income, Average-Spending Customers.**


**Cluster 2** **High-Income, Low-Spending Customers**


**Cluster 3**  **Low-Income, High-Spending Customers**


**Cluster 4** **High-Income, High-Spending Customers**
"""